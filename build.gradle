plugins {
	id 'application'
	//Plugin to create fat jars, this will bundle all libraries into the jar file, and avoid having to distribute library files.
	id 'com.github.johnrengelman.shadow' version '2.0.4'
}

boolean isWindows = System.properties.'os.name'.toLowerCase().contains('windows');

//Change to test better Java versions
sourceCompatibility = 8
targetCompatibility = 8

repositories {
	mavenCentral()
}

mainClassName = 'se306group8.scheduleoptimizer.Main'

sourceSets { 
	main {
		java.srcDirs = ['src/main']
		resources.srcDirs = ['res/main'] 
	} 

	test {
		java.srcDirs = ['src/test']
		resources.srcDirs = ['res/test'] 
	}
}

dependencies {
	compile group: 'commons-cli', name: 'commons-cli', version:'1.4'
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.2.0'
	testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.2.0'
}

test {
	useJUnitPlatform {
		includeEngines 'junit-jupiter'
	}
}

jar {
	from('.'){
		include('NOTICE.txt')
		include('licenses/')
		into('.')
	}

	manifest {
		attributes('Main-Class': mainClassName)
	}
}

task generateDotFiles(type: Exec) {
	//standardOutput = new ByteArrayOutputStream()
	//errorOutput = new ByteArrayOutputStream()

	def script = 'gxl2dot_dataset.sh'
	def input = 'gxl_dataset'
	def output = 'dataset'	

	workingDir 'conversion_script'	

	inputs.dir "conversion_script/$input"
	inputs.file "conversion_script/$script"
    outputs.dir output

	doFirst {
		mkdir "$output"
		mkdir "$output/input"
		mkdir "$output/output"
	}
	commandLine 'bash', '-c', "bash $script ../$output $input/*"
}

task cleanDotFiles(type: Delete) {
	delete 'dataset/output'
	delete 'dataset/input'
}

task rebuildDotFiles {
	dependsOn 'cleanDotFiles'
	dependsOn 'generateDotFiles'
	generateDotFiles.mustRunAfter 'cleanDotFiles'
}

tasks.withType(JavaCompile) {
  options.encoding = "UTF-8"
}
