package se306group8.scheduleoptimizer.algorithm;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.stream.IntStream;

import se306group8.scheduleoptimizer.taskgraph.Task;
import se306group8.scheduleoptimizer.taskgraph.TaskGraph;

public class BasicChildScheduleFinder implements ChildScheduleFinder {
	
	private final int _processors;
	
	public BasicChildScheduleFinder(int processors) {
		_processors = processors;
	}
	
	/** Returns a collection of child schedules that can be generated by adding one task to this solution.
	 * This list may not be exhaustive, but any omissions must have equivalent schedules returned by some PartialSolution.
	 * 
	 *  Equivalent means that the solution tree generated by the other task is a super tree of the tree generated by the omitted task.
	 *  A super tree is a tree where every task in the original tree has an equivalent task in the super tree. */
	@Override
	public List<TreeSchedule> getChildSchedules(TreeSchedule schedule) {
		
		TaskGraph graph = schedule.getGraph();

		Collection<Task> nextTasks = schedule.getAllocatable();
		
		// Get an array of integers that represents processor numbers
		int[] processors = IntStream.rangeClosed(1, _processors).toArray();
		
		List<TreeSchedule> childSchedules = new ArrayList<TreeSchedule>();
		
		for (Task task : nextTasks) {
			for (int processor : processors) {
				childSchedules.add(new TreeSchedule(graph, task, processor, schedule));
			}
		}
		return childSchedules;
	}
}
