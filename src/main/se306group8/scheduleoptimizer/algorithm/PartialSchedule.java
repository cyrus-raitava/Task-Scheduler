package se306group8.scheduleoptimizer.algorithm;

import java.util.Collection;

import se306group8.scheduleoptimizer.taskgraph.Schedule;

/** This is an interface that is used to wrap the very compressed representation that is used for ScheduleStorage. It is
 * not intended to be used for the storage itself, as the fact that it is an object instantly requires that it takes up
 * 16B, and usually 24B. Using clever compression we can store each schedule in 10B, doubling the number of solutions we can
 * store. */
public interface PartialSchedule {
	/** Returns a collection of child schedules that can be generated by adding one task to this solution.
	 * This list may not be exhaustive, but any omissions must have equivalent schedules returned by some PartialSolution.
	 * 
	 *  Equivalent means that the solution tree generated by the other task is a super tree of the tree generated by the omitted task.
	 *  A super tree is a tree where every task in the original tree has an equivalent task in the super tree. */
	Collection<PartialSchedule> getChildSchedules();
	
	/** Returns the full schedule. This may be null if this solution is not a full solution. */
	Schedule getFullSchedule();
}
